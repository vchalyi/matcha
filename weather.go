package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"

	"github.com/nathan-osman/go-sunrise"
)

type UserAgentTransport struct {
	http.RoundTripper
}

func (c *UserAgentTransport) RoundTrip(r *http.Request) (*http.Response, error) {
	r.Header.Set("User-Agent", `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36`)
	return c.RoundTripper.RoundTrip(r)
}

func displayWeather(w Writer, cfg Config) {
	// Display weather if lat and lon are set
	if cfg.WeatherLatitude != 0 && cfg.WeatherLongitude != 0 {
		w.write(getWeather(cfg.WeatherLatitude, cfg.WeatherLongitude))
	}
}

func displaySunriseSunset(w Writer, cfg Config) {
	if cfg.SunriseSunset && cfg.WeatherLatitude != 0 && cfg.WeatherLongitude != 0 {
		rise, set := sunrise.SunriseSunset(
			cfg.WeatherLatitude, cfg.WeatherLongitude,
			time.Now().Year(), time.Now().Month(), time.Now().Day(),
		)
		w.write(fmt.Sprintf("🌅 %s 🌇 %s", rise.Local().Format("15:04"), set.Local().Format("15:04")))
	}
}

func getWeather(lat, lon float64) string {
	client := &http.Client{
		Transport: &UserAgentTransport{http.DefaultTransport},
	}

	resp, err := client.Get(fmt.Sprintf("https://api.met.no/weatherapi/locationforecast/2.0/compact?lat=%.2f&lon=%.2f", lat, lon))
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	res := AutoGenerated{}
	json.Unmarshal([]byte(body), &res)

	var temperature float64 = res.Properties.Timeseries[0].Data.Instant.Details.AirTemperature
	var next_12_hours string = res.Properties.Timeseries[0].Data.Next12Hours.Summary.SymbolCode
	var weatherEmoji string = determineWeatherEmoji(next_12_hours)
	return fmt.Sprintf("# %d°C %s ️", int(temperature+0.5), weatherEmoji)

}

func determineWeatherEmoji(desc string) string {
	switch {
	case strings.Contains(desc, "cloudy") || strings.Contains(desc, "partlycloudy_day"):
		return "☁️"
	case strings.Contains(desc, "rain") || strings.Contains(desc, "heavyrain"):
		return "🌧"
	case strings.Contains(desc, "snow"):
		return "❄️"
	case strings.Contains(desc, "clearsky_day"):
		return "☀️"
	case strings.Contains(desc, "storm"):
		return "⛈"
	case strings.Contains(desc, "clearsky_night"):
		return "🌙"
	case strings.Contains(desc, "sleet"):
		return "🌧️❄️"
	case strings.Contains(desc, "fair_night") || strings.Contains(desc, "fair_day"):
		return "🌤"
	default:
		fmt.Println("Unknown weather: " + desc)
		return ""
	}
}

type AutoGenerated struct {
	Type     string `json:"type"`
	Geometry struct {
		Type        string `json:"type"`
		Coordinates []int  `json:"coordinates"`
	} `json:"geometry"`
	Properties struct {
		Meta struct {
			UpdatedAt time.Time `json:"updated_at"`
			Units     struct {
				AirPressureAtSeaLevel string `json:"air_pressure_at_sea_level"`
				AirTemperature        string `json:"air_temperature"`
				CloudAreaFraction     string `json:"cloud_area_fraction"`
				PrecipitationAmount   string `json:"precipitation_amount"`
				RelativeHumidity      string `json:"relative_humidity"`
				WindFromDirection     string `json:"wind_from_direction"`
				WindSpeed             string `json:"wind_speed"`
			} `json:"units"`
		} `json:"meta"`
		Timeseries []struct {
			Time time.Time `json:"time"`
			Data struct {
				Instant struct {
					Details struct {
						AirPressureAtSeaLevel float64 `json:"air_pressure_at_sea_level"`
						AirTemperature        float64 `json:"air_temperature"`
						CloudAreaFraction     float64 `json:"cloud_area_fraction"`
						RelativeHumidity      float64 `json:"relative_humidity"`
						WindFromDirection     float64 `json:"wind_from_direction"`
						WindSpeed             float64 `json:"wind_speed"`
					} `json:"details"`
				} `json:"instant"`
				Next12Hours struct {
					Summary struct {
						SymbolCode string `json:"symbol_code"`
					} `json:"summary"`
				} `json:"next_12_hours"`
				Next1Hours struct {
					Summary struct {
						SymbolCode string `json:"symbol_code"`
					} `json:"summary"`
					Details struct {
						PrecipitationAmount float64 `json:"precipitation_amount"`
					} `json:"details"`
				} `json:"next_1_hours"`
				Next6Hours struct {
					Summary struct {
						SymbolCode string `json:"symbol_code"`
					} `json:"summary"`
					Details struct {
						PrecipitationAmount float64 `json:"precipitation_amount"`
					} `json:"details"`
				} `json:"next_6_hours"`
			} `json:"data"`
		} `json:"timeseries"`
	} `json:"properties"`
}
